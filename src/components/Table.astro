---
import bookshelf from "../data/bookshelf.json";
---
<div x-data="table">
    <input type="text"
           x-on:input.debounce.50ms="search = $el.value.toLowerCase()"
           x-on:input.debounce.100ms="update()"
           class="w-full p-1 my-2 text-xs text-gray-900 border border-gray-300 rounded-lg focus:text-base bg-gray-50 bg-transparent backdrop-blur-sm"
          placeholder="search">


<table class="w-full text-sm text-left text-gray-700 bg-slate-50 bg-opacity-60 backdrop-blur-lg">
    <thead class="h-6 text-gray-700 uppercase text-s bg-gray-50">
        <tr>
          <th @click="reorder(0)">Author</th>
          <th @click="reorder(1)">Title</th>
          <th @click="reorder(2)">Series</th>
          <th @click="reorder(3)" class="hidden sm:table-cell text-right">pages</th>
          <th @click="reorder(4)" class="text-center">Read</th>
          <th @click="reorder(5)" class="text-center">Release</th>
        </tr>
    </thead>
    <tbody x-ref="tbody">
{bookshelf.books.map((book) =>
    <tr class="border-t border-dotted h-7 hover:bg-blue-300"
        x-show="$el.dataset.search.includes(search)"
        data-search={`${ book.title } ${book.author} ${ book.series }`.toLowerCase()}
    >
        <td class="sm:pl-1">{ book.author }</td>
        <td class="font-semibold text-slate-900">{ book.title }</td>
        <td class="font-extralight text-slate-900">{ book.series }</td>
        <td class="font-mono text-right text-xs hidden sm:table-cell" >{ book.pages }</td>
        <td class="font-mono text-center">{ book.read }</td>
        <td class="font-mono text-center">{ book.published }</td>
    </tr>
)}
</tbody>
<tfoot class="h-6 text-gray-500 text-s bg-gray-50">
    <tr>
      <th colspan="6">
      <span class="text-gray-900"> <span x-text="visible"></span> books</span> out of <span x-text="$refs.tbody.querySelectorAll('tr').length"></span>
      </th>
    </tr>
    </tfoot>
</table>

</div>

<script>
import Alpine from 'alpinejs';

document.addEventListener('alpine:init', () => {
    Alpine.data('table', () => ({
        init() {
            this.visible = this.$refs.tbody.querySelectorAll('tr').length
        },
        search: "",
        sortOrder: -1,
        visible: 0,
        update() {
            this.visible = Array.from(this.$refs.tbody.querySelectorAll('tr')).filter((tr) => tr.style.display !== 'none').length;
        },
        reorder(index: number) {
                this.sortOrder = this.sortOrder * -1;
                this.getRows()
                    .sort((a: HTMLElement, b: HTMLElement) => { return this.sortOrder * (a.querySelectorAll("td")[index].textContent as string).localeCompare((b.querySelectorAll("td")[index].textContent as string)); })
                    .forEach((tr) => {
                        this.$refs.tbody.appendChild(tr);
                    });
        },
        getRows() { return Array.from(this.$refs.tbody.querySelectorAll("tr")); }
    }))
})

Alpine.start();
</script>
