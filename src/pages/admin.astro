---
import Layout from "../layouts/Layout.astro";
---

<Layout title="not an admin page">
    <div class="flex flex-col space-y-1 bg-slate-50 rounded-lg p-2">
        <div>
            <label for="openlibrarysearch">search</label>
            <input
                type="search"
                size="42"
                id="openlibrarysearch"
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-2"
            />
        </div>
        <div class="flex">
            <span> Work: </span>
            <select class="font-mono" name="work" id="works"></select>
        </div>

        <textarea
            id="textarea"
            name=""
            rows="32"
            readonly
            class="font-mono font-semibold text-lg text-gray-800 rounded-b-md border border-gray-300 bg-gray-50"
            >
        </textarea>
    </div>
</Layout>

<script>
    interface OpenLibraryWork {
        key: string;
        title: string;
        author_name: string[];
        first_publish_year: number | string;
        number_of_pages_median: number;
        subject?: string[];
    };

    const output = document.getElementById("textarea") as HTMLTextAreaElement;
    const search = document.getElementById("openlibrarysearch") as HTMLInputElement;
    const workSelect = document.getElementById("works") as HTMLSelectElement;
    let works: OpenLibraryWork[] = [];

    search.addEventListener("change", async (event) => {
        workSelect.replaceChildren();
        const queryString = encodeURIComponent((event.target as HTMLInputElement).value.trim());
        output.textContent = "loading...";

        const response = await fetch(
            `https://openlibrary.org/search.json?q=${queryString}`
        );

        if (response.status != 200) {
            output.textContent = `API error ${response.status}`;
            return;
        }
        const jsonResponse = await response.json();
        works = (jsonResponse.docs as OpenLibraryWork[]).sort((w1, w2) => parseInt(w1.first_publish_year as string) - parseInt(w2.first_publish_year as string));
        works.forEach((w) => {
            const author = w.author_name?.join(", ");
            workSelect.add(new Option(`${w.first_publish_year} - ${w.title} -- ${author}`));
        });

        workSelect.dispatchEvent(new Event("change"));
    });

    workSelect.addEventListener("change", () => {
        const work: OpenLibraryWork = works[workSelect.selectedIndex];

        const ids = Object.entries(work).filter(id => id[0].startsWith("id_"));
        console.log(ids);

        // get series from editions
        // https://openlibrary.org/works/${OLID}/editions.json

        const ret = {
            title: work.title,
            read: "",
            author: work.author_name,
            published: work.first_publish_year,
            pages: work.number_of_pages_median,
            tags: work.subject?.map((subject: string) => subject.toLowerCase()),
            id: {
                olid: work.key.split("/").pop()
            },
            language: "ENG"
        };

        output.textContent = JSON.stringify(ret, null, 2) + ",";
    });
</script>
