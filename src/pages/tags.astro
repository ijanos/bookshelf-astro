---
import Layout from "../layouts/Layout.astro";
import { books } from "../data/books";
import Tag from "../components/Tag.astro";

const allTags = Array.from(new Set(books.flatMap(book => book.tags)));

allTags.sort((a, b) => {
  const aUpper = a.toUpperCase();
  const bUpper = b.toUpperCase();
  if (aUpper < bUpper) {
    return -1;
  }
  if (aUpper > bUpper) {
    return 1;
  }

  return 0;
});
---

<Layout title="my bookshelf | tags">


<div x-data="table" class="grow flex flex-col gap-2">

    <div class="flex flex-wrap gap-1">
        { allTags.map((tag) => <Tag tag={tag}/> ) }
    </div>


    <input type="text"
           x-on:input="search = $el.value.toLowerCase()"
           x-on:input.debounce.100ms="update()"
           class="p-1 text-gray-900 rounded-lg bg-gray-50 bg-transparent backdrop-blur-lg"
          placeholder="search">

<div class="overflow-x-auto rounded-md">

<table class="w-full text-sm text-left text-gray-700 bg-neutral-50 bg-opacity-60 backdrop-blur-lg">
    <thead class="h-6 text-gray-700 uppercase text-s bg-gray-50">
        <tr>
          <th @click="reorder(0)" class="hidden sm:table-cell">Author</th>
          <th @click="reorder(1)">Title</th>
          <th class="text-center hidden sm:table-cell">Tags</th>
        </tr>
    </thead>
    <tbody x-ref="tbody">

{books.map((book) =>
    <tr class="border-slate-50 h-7 border-b border-opacity-20 hover:bg-blue-300"
        x-show="rowshow($el.dataset.index)"
        data-index={ book.index }
        data-search={ `${ book.title } ${ book.author.join(" ") } ${ book.tags.join(" ") }`.toLowerCase() }
    >
        <td class="hidden sm:table-cell">{ book.author.join(", ") }</td>
        <td class="font-semibold text-slate-900">{ book.title }</td>
        <td class="text-right hidden sm:table-cell">{ book.tags.map((tag) => <Tag tag={tag}/> )}</td>
    </tr>
)}

</tbody>
<tfoot class="h-6 text-gray-500 text-s bg-gray-50">
    <tr>
      <th colspan="6">
      <span class="text-gray-900"><span x-text="visible"></span> books</span> out of { books.length }</span>
      </th>
    </tr>
    </tfoot>
</table>
</div>

</div>

</Layout>


<script>
import Alpine from 'alpinejs';

document.addEventListener('alpine:init', () => {
    Alpine.data('table', () => ({
        async init() {
            this.visible = this.$refs.tbody.querySelectorAll('tr').length;
            const tags = await (await fetch('/tags.json')).json();
            this.allTags = new Map(Object.entries(tags));
        },
        search: "",
        sortOrder: -1,
        visible: 0,
        open: false,
        allTags: new Map(),
        selectedTags: new Set(),
        visibleIndexes: Array<number>(),
        activeTags: Array<string>(),
        rowshow(id: string) {
            if (this.selectedTags.size < 1) {
                return true;
            }
            return this.visibleIndexes.includes(parseInt(id));
        },
        tagColor(tag: string) {
            if (this.selectedTags.size < 1) {
                return "bg-yellow-50"
            }
            if (this.selectedTags.has(tag)) {
                return "bg-green-500"
            } else if (this.activeTags.includes(tag)) {
                return "bg-yellow-50"
            } else {
                return "bg-slate-500"
            };
        },
        tagToggle(tag: string) {
            if (this.selectedTags.has(tag)) {
                this.selectedTags.delete(tag);
            } else {
                this.selectedTags.add(tag);
            }

            const allSelectedIndexes = [...this.allTags].filter(([tagName, indexList]) => {
                return this.selectedTags.has(tagName);
             }).flatMap(([tagName, indexList]) => {
                return indexList;
            });

            const counter = new Map();
            allSelectedIndexes.forEach((i) => {
                counter.has(i) || counter.set(i, 0);
                counter.set(i, counter.get(i) + 1);
            });

            this.visibleIndexes = [...counter].filter(([rowIndex, count]) => {
                return count == this.selectedTags.size;
            }).map(([rowIndex, count]) => rowIndex);

            this.activeTags = [...this.allTags].filter(([tagName, indexList]) => {
                return this.visibleIndexes.some((i) => indexList.includes(i))
            }).map(([tagName, indexList]) => tagName);
        },
        update() {
            this.visible = Array.from(this.$refs.tbody.querySelectorAll('tr')).filter((tr) => tr.style.display !== 'none').length;
        },
        reorder(index: number) {
                this.sortOrder = this.sortOrder * -1;
                this.getRows()
                    .sort((a: HTMLElement, b: HTMLElement) => { return this.sortOrder * (a.querySelectorAll("td")[index].textContent as string).localeCompare((b.querySelectorAll("td")[index].textContent as string)); })
                    .forEach((tr) => {
                        this.$refs.tbody.appendChild(tr);
                    });
        },
        getRows() { return Array.from(this.$refs.tbody.querySelectorAll("tr")); }
    }))
})

Alpine.start();
</script>
